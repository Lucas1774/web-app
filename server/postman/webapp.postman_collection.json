{
	"info": {
		"_postman_id": "f33a5802-fb6e-4bcf-a5b8-b78ad78b2926",
		"name": "webapp",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44440825",
		"_collection_link": "https://johndoe-483049.postman.co/workspace/John-Doe's-Workspace~66114b17-ce92-4db7-8551-7be733093137/collection/44440825-f33a5802-fb6e-4bcf-a5b8-b78ad78b2926?action=share&source=collection_link&creator=44440825"
	},
	"item": [
		{
			"name": "authentication/ needs removedCookie",
			"item": [
				{
					"name": "valid user",
					"item": [
						{
							"name": "login validuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
											"if (pm.cookies.has(\"authToken\")) {\r",
											"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "check-auth validuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.cookies.clear();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/authentication/check-auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"check-auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalid user",
					"item": [
						{
							"name": "login invaliduser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => pm.response.to.have.status(403));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"wrongPass\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "check-auth invaliduser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => pm.response.to.have.status(403));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/authentication/check-auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"check-auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "tradingbot/ leave first three sp500",
			"item": [
				{
					"name": "market/",
					"item": [
						{
							"name": "last/",
							"item": [
								{
									"name": "AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 1,\r",
													"    maxItems: 1,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"symbol\", \"open\", \"high\", \"low\", \"price\", \"volume\",\r",
													"            \"date\", \"previousClose\", \"change\", \"changePercent\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            symbol: {\r",
													"                type: \"object\",\r",
													"                required: [\"id\", \"name\"],\r",
													"                properties: {\r",
													"                    id: { type: \"integer\" },\r",
													"                    name: { type: \"string\", value: \"AAPL\" }\r",
													"                }\r",
													"            },\r",
													"            open: { type: \"number\" },\r",
													"            high: { type: \"number\" },\r",
													"            low: { type: \"number\" },\r",
													"            price: { type: \"number\" },\r",
													"            volume: { type: [\"integer\", \"null\"] },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
													"            previousClose: { type: \"number\" },\r",
													"            change: { type: \"number\" },\r",
													"            changePercent: { type: \"number\" }\r",
													"        },\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/last/AAPL",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"last",
												"AAPL"
											]
										}
									},
									"response": []
								},
								{
									"name": "AAPL,IBM,GOOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 3,\r",
													"    maxItems: 3,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"symbol\", \"open\", \"high\", \"low\", \"price\", \"volume\",\r",
													"            \"date\", \"previousClose\", \"change\", \"changePercent\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            symbol: {\r",
													"                type: \"object\",\r",
													"                required: [\"id\", \"name\"],\r",
													"                properties: {\r",
													"                    id: { type: \"integer\" },\r",
													"                    name: { type: \"string\", minLength: 1 }\r",
													"                }\r",
													"            },\r",
													"            open: { type: \"number\" },\r",
													"            high: { type: \"number\" },\r",
													"            low: { type: \"number\" },\r",
													"            price: { type: \"number\" },\r",
													"            volume: { type: [\"integer\", \"null\"] },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
													"            previousClose: { type: \"number\" },\r",
													"            change: { type: \"number\" },\r",
													"            changePercent: { type: \"number\" }\r",
													"        },\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/last/AAPL,IBM,GOOG",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"last",
												"AAPL,IBM,GOOG"
											]
										}
									},
									"response": []
								},
								{
									"name": "- (all)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 3,\r",
													"    maxItems: 3,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"symbol\", \"open\", \"high\", \"low\", \"price\", \"volume\",\r",
													"            \"date\", \"previousClose\", \"change\", \"changePercent\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            symbol: {\r",
													"                type: \"object\",\r",
													"                required: [\"id\", \"name\"],\r",
													"                properties: {\r",
													"                    id: { type: \"integer\" },\r",
													"                    name: { type: \"string\", minLength: 1 }\r",
													"                }\r",
													"            },\r",
													"            open: { type: \"number\" },\r",
													"            high: { type: \"number\" },\r",
													"            low: { type: \"number\" },\r",
													"            price: { type: \"number\" },\r",
													"            volume: { type: [\"integer\", \"null\"] },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\" },\r",
													"            previousClose: { type: \"number\" },\r",
													"            change: { type: \"number\" },\r",
													"            changePercent: { type: \"number\" }\r",
													"        },\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/last",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"last"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "historic/",
							"item": [
								{
									"name": "AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Contains item for yesterday and 8 days ago\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const now = new Date();\r",
													"\r",
													"    const dayOfWeek = now.getDay();\r",
													"    const daysSinceFriday = dayOfWeek >= 5\r",
													"        ? dayOfWeek - 5\r",
													"        : dayOfWeek + 2;\r",
													"\r",
													"    const lastFriday = new Date(now);\r",
													"    lastFriday.setDate(now.getDate() - daysSinceFriday);\r",
													"\r",
													"    const previousFriday = new Date(lastFriday);\r",
													"    previousFriday.setDate(lastFriday.getDate() - 7);\r",
													"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"    const lastFridayIso = toIsoDate(lastFriday);\r",
													"    const previousFridayIso = toIsoDate(previousFriday);\r",
													"\r",
													"    const hasYesterday = jsonData.some(item => item.date === lastFridayIso);\r",
													"    const hasEightDaysAgo = jsonData.some(item => item.date === previousFridayIso);\r",
													"\r",
													"    pm.expect(hasYesterday).to.be.true;\r",
													"    pm.expect(hasEightDaysAgo).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Each item has symbol AAPL and price not null\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    jsonData.forEach(item => {\r",
													"        pm.expect(item.symbol.name).to.eql(\"AAPL\");\r",
													"        pm.expect(item.price).to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/historic/AAPL",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"historic",
												"AAPL"
											]
										}
									},
									"response": []
								},
								{
									"name": "AAPL,IBM,GOOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Contains item for yesterday and 8 days ago\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const now = new Date();\r",
													"\r",
													"    const dayOfWeek = now.getDay();\r",
													"    const daysSinceFriday = dayOfWeek >= 5\r",
													"        ? dayOfWeek - 5\r",
													"        : dayOfWeek + 2;\r",
													"\r",
													"    const lastFriday = new Date(now);\r",
													"    lastFriday.setDate(now.getDate() - daysSinceFriday);\r",
													"\r",
													"    const previousFriday = new Date(lastFriday);\r",
													"    previousFriday.setDate(lastFriday.getDate() - 7);\r",
													"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"    const lastFridayIso = toIsoDate(lastFriday);\r",
													"    const previousFridayIso = toIsoDate(previousFriday);\r",
													"\r",
													"    const hasYesterday = jsonData.some(item => item.date === lastFridayIso);\r",
													"    const hasEightDaysAgo = jsonData.some(item => item.date === previousFridayIso);\r",
													"\r",
													"    pm.expect(hasYesterday).to.be.true;\r",
													"    pm.expect(hasEightDaysAgo).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Each item has symbol AAPL, IBM or GOOG and price not null\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    jsonData.forEach(item => {\r",
													"        pm.expect(item.symbol.name).to.be.oneOf([\"AAPL\", \"IBM\", \"GOOG\"]);\r",
													"        pm.expect(item.price).to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/historic/AAPL,IBM,GOOG",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"historic",
												"AAPL,IBM,GOOG"
											]
										}
									},
									"response": []
								},
								{
									"name": "- (all)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an array of size ~5000\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.length).to.be.closeTo(100, 50);\r",
													"});\r",
													"\r",
													"pm.test(\"Contains item for yesterday and 8 days ago\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    const now = new Date();\r",
													"\r",
													"    const dayOfWeek = now.getDay();\r",
													"    const daysSinceFriday = dayOfWeek >= 5\r",
													"        ? dayOfWeek - 5\r",
													"        : dayOfWeek + 2;\r",
													"\r",
													"    const lastFriday = new Date(now);\r",
													"    lastFriday.setDate(now.getDate() - daysSinceFriday);\r",
													"\r",
													"    const previousFriday = new Date(lastFriday);\r",
													"    previousFriday.setDate(lastFriday.getDate() - 7);\r",
													"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"    const lastFridayIso = toIsoDate(lastFriday);\r",
													"    const previousFridayIso = toIsoDate(previousFriday);\r",
													"\r",
													"    const hasYesterday = jsonData.some(item => item.date === lastFridayIso);\r",
													"    const hasEightDaysAgo = jsonData.some(item => item.date === previousFridayIso);\r",
													"\r",
													"    pm.expect(hasYesterday).to.be.true;\r",
													"    pm.expect(hasEightDaysAgo).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Each item has price not null\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    jsonData.forEach(item => {\r",
													"        pm.expect(item.price).to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/market/historic",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"market",
												"historic"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "news/",
					"item": [
						{
							"name": "last/",
							"item": [
								{
									"name": "AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 2,\r",
													"    maxItems: 50,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"externalId\", \"symbols\", \"date\", \"headline\", \"summary\", \"url\", \"source\",\r",
													"            \"category\", \"image\", \"embeddings\", \"sentiment\", \"sentimentConfidence\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            externalId: { type: \"integer\" },\r",
													"            symbols: {\r",
													"                type: \"array\",\r",
													"                items: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"integer\" },\r",
													"                        name: { type: \"string\", minLength: 1, value: \"AAPL\" }\r",
													"                    }\r",
													"                }\r",
													"            },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}.*$\" },\r",
													"            headline: { type: \"string\" },\r",
													"            summary: { type: \"string\" },\r",
													"            url: { type: \"string\", format: \"uri\" },\r",
													"            source: { type: \"string\" },\r",
													"            category: { type: \"string\" },\r",
													"            image: { type: \"string\" },\r",
													"            embeddings: { type: [\"null\", \"array\"] },\r",
													"            sentiment: { type: \"null\" },\r",
													"            sentimentConfidence: { type: \"null\" }\r",
													"        },\r",
													"        additionalProperties: false\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/last/AAPL?generateEmbeddings=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"last",
												"AAPL"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AAPL,IBM,GOOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 6,\r",
													"    maxItems: 100,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"externalId\", \"symbols\", \"date\", \"headline\", \"summary\", \"url\", \"source\",\r",
													"            \"category\", \"image\", \"embeddings\", \"sentiment\", \"sentimentConfidence\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            externalId: { type: \"integer\" },\r",
													"            symbols: {\r",
													"                type: \"array\",\r",
													"                items: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"integer\" },\r",
													"                        name: { type: \"string\", minLength: 1 }\r",
													"                    }\r",
													"                }\r",
													"            },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}.*$\" },\r",
													"            headline: { type: \"string\" },\r",
													"            summary: { type: \"string\" },\r",
													"            url: { type: \"string\", format: \"uri\" },\r",
													"            source: { type: \"string\" },\r",
													"            category: { type: \"string\" },\r",
													"            image: { type: \"string\" },\r",
													"            embeddings: { type: \"null\" },\r",
													"            sentiment: { type: \"null\" },\r",
													"            sentimentConfidence: { type: \"null\" }\r",
													"        },\r",
													"        additionalProperties: false\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/last/AAPL,IBM,GOOG?generateEmbeddings=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"last",
												"AAPL,IBM,GOOG"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "- (all)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    type: \"array\",\r",
													"    minItems: 6,\r",
													"    maxItems: 150,\r",
													"    items: {\r",
													"        type: \"object\",\r",
													"        required: [\r",
													"            \"id\", \"externalId\", \"symbols\", \"date\", \"headline\", \"summary\", \"url\", \"source\",\r",
													"            \"category\", \"image\", \"embeddings\", \"sentiment\", \"sentimentConfidence\"\r",
													"        ],\r",
													"        properties: {\r",
													"            id: { type: [\"integer\", \"null\"] },\r",
													"            externalId: { type: \"integer\" },\r",
													"            symbols: {\r",
													"                type: \"array\",\r",
													"                items: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"integer\" },\r",
													"                        name: { type: \"string\", minLength: 1 }\r",
													"                    }\r",
													"                }\r",
													"            },\r",
													"            date: { type: \"string\", pattern: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}.*$\" },\r",
													"            headline: { type: \"string\" },\r",
													"            summary: { type: \"string\" },\r",
													"            url: { type: \"string\", format: \"uri\" },\r",
													"            source: { type: \"string\" },\r",
													"            category: { type: \"string\" },\r",
													"            image: { type: \"string\" },\r",
													"            embeddings: { type: \"null\" },\r",
													"            sentiment: { type: \"null\" },\r",
													"            sentimentConfidence: { type: \"null\" }\r",
													"        },\r",
													"        additionalProperties: false\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.test(\"Matches expected JSON schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/last?generateEmbeddings=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"last"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "historic/",
							"item": [
								{
									"name": "threeDaysAgo/AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId, symbol AAPL, and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.symbols[0].name, \"symbol name\").to.equal(\"AAPL\");\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/historic/{{specificDate}}/AAPL?generateEmbeddings=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"historic",
												"{{specificDate}}",
												"AAPL"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "threeDaysAgo/AAPL,IBM,GOOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId, symbol AAPL, IBM or GOOG, and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.symbols.every(symbol => [\"AAPL\", \"IBM\", \"GOOG\"].includes(symbol.name)), \"symbol\").to.be.true;\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/historic/{{specificDate}}/AAPL,IBM,GOOG?generateEmbeddings=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"historic",
												"{{specificDate}}",
												"AAPL,IBM,GOOG"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "threeDaysAgo (all)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/news/historic/{{specificDate}}?generateEmbeddings=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"news",
												"historic",
												"{{specificDate}}"
											],
											"query": [
												{
													"key": "generateEmbeddings",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"const toIsoDate = d => d.toISOString().slice(0, 10);\r",
											"\r",
											"const now = new Date();\r",
											"\r",
											"const specificDate = new Date(now);\r",
											"specificDate.setDate(now.getDate() - 3);\r",
											"pm.environment.set(\"specificDate\", toIsoDate(specificDate));\r",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "embeddings/",
					"item": [
						{
							"name": "1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const newsArray = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array with one object\", () => {\r",
											"    pm.expect(newsArray).to.be.an(\"array\");\r",
											"    pm.expect(newsArray.length, \"array length\").to.eql(1);\r",
											"});\r",
											"\r",
											"const news = newsArray[0];\r",
											"\r",
											"pm.test(\"symbol is AAPL\", () => {\r",
											"    pm.expect(news.symbols).to.be.an(\"array\");\r",
											"    pm.expect(news.symbols[0].name, \"symbol name\").to.equal(\"AAPL\");\r",
											"});\r",
											"\r",
											"pm.test(\"id is 1\", () => {\r",
											"    pm.expect(news.id).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"embeddings is an array of length 3072\", () => {\r",
											"    pm.expect(news.embeddings).to.be.an(\"array\");\r",
											"    pm.expect(news.embeddings.length).to.eql(3072);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/embeddings/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"embeddings",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "1,2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const newsArray = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array with two objects\", () => {\r",
											"    pm.expect(newsArray).to.be.an(\"array\");\r",
											"    pm.expect(newsArray.length, \"array length\").to.eql(2);\r",
											"});\r",
											"\r",
											"const news1 = newsArray[0];\r",
											"pm.test(\"news[0] id is 2\", () => {\r",
											"    pm.expect(news1.id).to.be.oneOf([1, 2]);\r",
											"});\r",
											"pm.test(\"news[0] symbol array\", () => {\r",
											"    pm.expect(news1.symbols).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"news[0] embeddings is an array of length 3072\", () => {\r",
											"    pm.expect(news1.embeddings).to.be.an(\"array\");\r",
											"    pm.expect(news1.embeddings.length).to.eql(3072);\r",
											"});\r",
											"\r",
											"const news2 = newsArray[1];\r",
											"pm.test(\"news[1] id is 2\", () => {\r",
											"    pm.expect(news1.id).to.be.oneOf([1, 2]);\r",
											"});\r",
											"pm.test(\"news[1] symbol array\", () => {\r",
											"    pm.expect(news2.symbols).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"news[1] embeddings is an array of length 3072\", () => {\r",
											"    pm.expect(news2.embeddings).to.be.an(\"array\");\r",
											"    pm.expect(news2.embeddings.length).to.eql(3072);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/embeddings/1,2",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"embeddings",
										"1,2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "portfolio/",
					"item": [
						{
							"name": "trades (run this first)",
							"item": [
								{
									"name": "sell no stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/sell?symbolName=AAPL&price=5.5&quantity=2&mock=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"sell"
											],
											"query": [
												{
													"key": "symbolName",
													"value": "AAPL"
												},
												{
													"key": "price",
													"value": "5.5"
												},
												{
													"key": "quantity",
													"value": "2"
												},
												{
													"key": "mock",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "buy AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected fields and types\", function () {\r",
													"    const json = pm.response.json();\r",
													"\r",
													"    pm.expect(json.id).to.be.a(\"number\");\r",
													"    pm.expect(json.quantity).to.eql(2.000);\r",
													"    pm.expect(json.averageCost).to.eql(5.50000000);\r",
													"\r",
													"    pm.expect(json.symbol).to.be.an(\"object\");\r",
													"    pm.expect(json.symbol.id).to.be.a(\"number\");\r",
													"    pm.expect(json.symbol.name).to.eql(\"AAPL\");\r",
													"\r",
													"    const isoLike = /^\\d{4}-\\d{2}-\\d{2}(T.*)?$/;\r",
													"    pm.expect(json.effectiveTimestamp).to.match(isoLike);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/buy?symbolName=AAPL&price=5.5&quantity=2&commission=0.03&mock=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"buy"
											],
											"query": [
												{
													"key": "symbolName",
													"value": "AAPL"
												},
												{
													"key": "price",
													"value": "5.5"
												},
												{
													"key": "quantity",
													"value": "2"
												},
												{
													"key": "commission",
													"value": "0.03"
												},
												{
													"key": "mock",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "buy ABT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected fields and types\", function () {\r",
													"    const json = pm.response.json();\r",
													"\r",
													"    pm.expect(json.id).to.be.a(\"number\");\r",
													"    pm.expect(json.quantity).to.eql(2.000);\r",
													"    pm.expect(json.averageCost).to.eql(5.50000000);\r",
													"\r",
													"    pm.expect(json.symbol).to.be.an(\"object\");\r",
													"    pm.expect(json.symbol.id).to.be.a(\"number\");\r",
													"    pm.expect(json.symbol.name).to.eql(\"ABT\");\r",
													"\r",
													"    const isoLike = /^\\d{4}-\\d{2}-\\d{2}(T.*)?$/;\r",
													"    pm.expect(json.effectiveTimestamp).to.match(isoLike);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/buy?symbolName=ABT&price=5.5&quantity=2&commission=0.03&mock=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"buy"
											],
											"query": [
												{
													"key": "symbolName",
													"value": "ABT"
												},
												{
													"key": "price",
													"value": "5.5"
												},
												{
													"key": "quantity",
													"value": "2"
												},
												{
													"key": "commission",
													"value": "0.03"
												},
												{
													"key": "mock",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sell",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected fields and types\", function () {\r",
													"    const json = pm.response.json();\r",
													"\r",
													"    pm.expect(json.id).to.be.a(\"number\");\r",
													"    pm.expect(json.quantity).to.eql(1.000);\r",
													"    pm.expect(json.averageCost).to.eql(5.50000000);\r",
													"\r",
													"    pm.expect(json.symbol).to.be.an(\"object\");\r",
													"    pm.expect(json.symbol.id).to.be.a(\"number\");\r",
													"    pm.expect(json.symbol.name).to.eql(\"AAPL\");\r",
													"\r",
													"    const isoLike = /^\\d{4}-\\d{2}-\\d{2}(T.*)?$/;\r",
													"    pm.expect(json.effectiveTimestamp).to.match(isoLike);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/sell?symbolName=AAPL&price=3.5&quantity=1&mock=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"sell"
											],
											"query": [
												{
													"key": "symbolName",
													"value": "AAPL"
												},
												{
													"key": "price",
													"value": "3.5"
												},
												{
													"key": "quantity",
													"value": "1"
												},
												{
													"key": "mock",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sell no stock",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", () => {\r",
													"    pm.response.to.have.status(422);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/sell?symbolName=AAPL&price=1.5&quantity=2&mock=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"sell"
											],
											"query": [
												{
													"key": "symbolName",
													"value": "AAPL"
												},
												{
													"key": "price",
													"value": "1.5"
												},
												{
													"key": "quantity",
													"value": "2"
												},
												{
													"key": "mock",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "stand/",
							"item": [
								{
									"name": "static",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches JSON schema\", function () {\r",
													"    const schema = {\r",
													"        type: \"array\",\r",
													"        minItems: 2,\r",
													"        maxItems: 2,\r",
													"        items: {\r",
													"            type: \"object\",\r",
													"            required: [\"symbol\", \"quantity\", \"averageCost\", \"positionValue\", \"pnL\"],\r",
													"            properties: {\r",
													"                symbol: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"number\" },\r",
													"                        name: { type: \"string\" }\r",
													"                    },\r",
													"                    additionalProperties: false\r",
													"                },\r",
													"                quantity: { type: \"number\" },\r",
													"                averageCost: { type: \"number\" },\r",
													"                positionValue: { type: \"number\" },\r",
													"                pnL: { type: \"number\" }\r",
													"            },\r",
													"            additionalProperties: false\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.response.to.have.jsonBody(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/stand?mock=true&dynamic=false",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"stand"
											],
											"query": [
												{
													"key": "mock",
													"value": "true"
												},
												{
													"key": "dynamic",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "dynamic",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches JSON schema\", function () {\r",
													"    const schema = {\r",
													"        type: \"array\",\r",
													"        minItems: 2,\r",
													"        maxItems: 2,\r",
													"        items: {\r",
													"            type: \"object\",\r",
													"            required: [\"symbol\", \"quantity\", \"averageCost\", \"positionValue\", \"pnL\"],\r",
													"            properties: {\r",
													"                symbol: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"number\" },\r",
													"                        name: { type: \"string\" }\r",
													"                    },\r",
													"                    additionalProperties: false\r",
													"                },\r",
													"                quantity: { type: \"number\" },\r",
													"                averageCost: { type: \"number\" },\r",
													"                positionValue: { type: \"number\" },\r",
													"                pnL: { type: \"number\" }\r",
													"            },\r",
													"            additionalProperties: false\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.response.to.have.jsonBody(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/stand?mock=true&dynamic=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"stand"
											],
											"query": [
												{
													"key": "mock",
													"value": "true"
												},
												{
													"key": "dynamic",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "dynamic AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches JSON schema\", function () {\r",
													"    const schema = {\r",
													"        type: \"array\",\r",
													"        minItems: 1,\r",
													"        maxItems: 1,\r",
													"        items: {\r",
													"            type: \"object\",\r",
													"            required: [\"symbol\", \"quantity\", \"averageCost\", \"positionValue\", \"pnL\"],\r",
													"            properties: {\r",
													"                symbol: {\r",
													"                    type: \"object\",\r",
													"                    required: [\"id\", \"name\"],\r",
													"                    properties: {\r",
													"                        id: { type: \"number\" },\r",
													"                        name: { type: \"string\" }\r",
													"                    },\r",
													"                    additionalProperties: false\r",
													"                },\r",
													"                quantity: { type: \"number\" },\r",
													"                averageCost: { type: \"number\" },\r",
													"                positionValue: { type: \"number\" },\r",
													"                pnL: { type: \"number\" }\r",
													"            },\r",
													"            additionalProperties: false\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.response.to.have.jsonBody(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/portfolio/stand/AAPL?dynamic=true&llm=false&mock=true&sendFixmeRequest=false&overwrite=true",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"portfolio",
												"stand",
												"AAPL"
											],
											"query": [
												{
													"key": "dynamic",
													"value": "true"
												},
												{
													"key": "llm",
													"value": "false"
												},
												{
													"key": "mock",
													"value": "true"
												},
												{
													"key": "sendFixmeRequest",
													"value": "false"
												},
												{
													"key": "overwrite",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "sentiment/",
					"item": [
						{
							"name": "historic/",
							"item": [
								{
									"name": "threeDaysAgo/AAPL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId, symbol AAPL, and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.symbols.some(symbol => \"AAPL\" === symbol.name), \"symbol AAPL\").to.be.true;\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"        pm.expect(item.sentiment).to.be.oneOf([\"positive\", \"negative\", \"neutral\"]);\r",
													"        pm.expect(item.sentimentConfidence).to.be.a(\"number\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"const now = new Date();\r",
													"\r",
													"const specificDate = new Date(now);\r",
													"specificDate.setDate(now.getDate() - 3);\r",
													"pm.environment.set(\"specificDate\", toIsoDate(specificDate));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/sentiment/historic/{{specificDate}}/AAPL",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"sentiment",
												"historic",
												"{{specificDate}}",
												"AAPL"
											]
										}
									},
									"response": []
								},
								{
									"name": "threeDaysAgo/AAPL,IBM,GOOG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"    pm.expect(data.length).to.be.greaterThan(50);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId, symbol AAPL, IBM or GOOG, and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.symbols.some(symbol => [\"AAPL\", \"IBM\", \"GOOG\"].includes(symbol.name)), \"symbol AAPL or IBM or GOOG\").to.be.true;\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"        pm.expect(item.sentiment).to.be.oneOf([\"positive\", \"negative\", \"neutral\"]);\r",
													"        pm.expect(item.sentimentConfidence).to.be.a(\"number\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"const now = new Date();\r",
													"\r",
													"const specificDate = new Date(now);\r",
													"specificDate.setDate(now.getDate() - 3);\r",
													"pm.environment.set(\"specificDate\", toIsoDate(specificDate));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/sentiment/historic/{{specificDate}}/AAPL,IBM,GOOG",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"sentiment",
												"historic",
												"{{specificDate}}",
												"AAPL,IBM,GOOG"
											]
										}
									},
									"response": []
								},
								{
									"name": "threeDaysAgo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"pm.test(\"Response is an array\", () => {\r",
													"    pm.expect(Array.isArray(data)).to.be.true;\r",
													"    pm.expect(data.length).to.be.greaterThan(500);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains items from yesterday and from 2025-05-07\", function () {\r",
													"    const now = new Date();\r",
													"    const yesterday = new Date(now);\r",
													"    yesterday.setDate(now.getDate() - 1);\r",
													"\r",
													"    // helper to get \"YYYY-MM-DD\"\r",
													"    const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"    const yesterdayIso = toIsoDate(yesterday);\r",
													"    const specificDate = pm.environment.get(\"specificDate\")\r",
													"\r",
													"    const hasYesterday = data.some(item => item.date.includes(yesterdayIso));\r",
													"    const hasSpecific = data.some(item => item.date.includes(specificDate));\r",
													"\r",
													"    pm.expect(hasYesterday, `Expected at least one item.date to include \"${yesterdayIso}\"`).to.be.true;\r",
													"    pm.expect(hasSpecific, `Expected at least one item.date to include \"${specificDate}\"`).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Every item has externalId and headline not null\", () => {\r",
													"    data.forEach(item => {\r",
													"        pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
													"        pm.expect(item.symbols).to.be.an(\"array\");\r",
													"        pm.expect(item.headline, \"headline\").to.not.be.null;\r",
													"        pm.expect(item.sentiment).to.be.oneOf([\"positive\", \"negative\", \"neutral\"]);\r",
													"        pm.expect(item.sentimentConfidence).to.be.a(\"number\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const toIsoDate = d => d.toISOString().slice(0, 10);\r",
													"\r",
													"const now = new Date();\r",
													"\r",
													"const specificDate = new Date(now);\r",
													"specificDate.setDate(now.getDate() - 3);\r",
													"pm.environment.set(\"specificDate\", toIsoDate(specificDate));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/sentiment/historic/{{specificDate}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"sentiment",
												"historic",
												"{{specificDate}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "recommendations/",
					"item": [
						{
							"name": "AAPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    minItems: 1,\r",
											"    maxItems: 1,\r",
											"    items: {\r",
											"        type: \"object\",\r",
											"        required: [\"input\", \"action\", \"confidence\", \"rationale\", \"errors\"],\r",
											"        properties: {\r",
											"            input: { type: \"string\" },\r",
											"            action: { type: \"string\" },\r",
											"            confidence: { type: \"number\" },\r",
											"            rationale: { type: \"string\" },\r",
											"            errors: { type: \"array\" }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Response schema is valid\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recommendations/AAPL?llm=false&mock=true&sendFixmeRequest=false&overwrite=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recommendations",
										"AAPL"
									],
									"query": [
										{
											"key": "llm",
											"value": "false"
										},
										{
											"key": "mock",
											"value": "true"
										},
										{
											"key": "sendFixmeRequest",
											"value": "false"
										},
										{
											"key": "overwrite",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AAPL,IBM,GOOG,MMM,AOS,ABT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    minItems: 3,\r",
											"    maxItems: 3,\r",
											"    items: {\r",
											"        type: \"object\",\r",
											"                required: [\"input\", \"action\", \"confidence\", \"rationale\", \"errors\"],\r",
											"        properties: {\r",
											"            input: { type: \"string\" },\r",
											"            action: { type: \"string\" },\r",
											"            confidence: { type: \"number\" },\r",
											"            rationale: { type: \"string\" },\r",
											"            errors: { type: \"array\" }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Response schema is valid\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recommendations/AAPL,IBM,GOOG?llm=false&mock=true&sendFixmeRequest=false&overwrite=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recommendations",
										"AAPL,IBM,GOOG"
									],
									"query": [
										{
											"key": "llm",
											"value": "false"
										},
										{
											"key": "mock",
											"value": "true"
										},
										{
											"key": "sendFixmeRequest",
											"value": "false"
										},
										{
											"key": "overwrite",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "stand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches JSON schema\", function () {\r",
											"    const schema = {\r",
											"        type: \"array\",\r",
											"        minItems: 1,\r",
											"        maxItems: 1,\r",
											"        items: {\r",
											"            type: \"object\",\r",
											"            required: [\"symbol\", \"quantity\", \"averageCost\", \"positionValue\", \"pnL\"],\r",
											"            properties: {\r",
											"                symbol: {\r",
											"                    type: \"object\",\r",
											"                    required: [\"id\", \"name\"],\r",
											"                    properties: {\r",
											"                        id: { type: \"number\" },\r",
											"                        name: { type: \"string\" }\r",
											"                    },\r",
											"                    additionalProperties: false\r",
											"                },\r",
											"                quantity: { type: \"number\" },\r",
											"                averageCost: { type: \"number\" },\r",
											"                positionValue: { type: \"number\" },\r",
											"                pnL: { type: \"number\" }\r",
											"            },\r",
											"            additionalProperties: false\r",
											"        }\r",
											"    };\r",
											"\r",
											"    pm.response.to.have.jsonBody(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"recommendation field is not null\", function() {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].recommendation).to.not.be.null;\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recommendations/stand?llm=false&mock=true&sendFixmeRequest=false&overwrite=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recommendations",
										"stand"
									],
									"query": [
										{
											"key": "llm",
											"value": "false"
										},
										{
											"key": "mock",
											"value": "true"
										},
										{
											"key": "sendFixmeRequest",
											"value": "false"
										},
										{
											"key": "overwrite",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "random 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(pm.response.json());\r",
											"\r",
											"const schema = {\r",
											"    type: \"array\",\r",
											"    minItems: 3,\r",
											"    maxItems: 3,\r",
											"    items: {\r",
											"        type: \"object\",\r",
											"        required: [\"input\", \"action\", \"confidence\", \"rationale\", \"errors\"],\r",
											"        properties: {\r",
											"            input: { type: \"string\" },\r",
											"            action: { type: \"string\" },\r",
											"            confidence: { type: \"number\" },\r",
											"            rationale: { type: \"string\" },\r",
											"            errors: { type: \"array\" }\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Response schema is valid\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/recommendations/random/3?llm=false&mock=true&sendFixmeRequest=false&overwrite=true",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"recommendations",
										"random",
										"3"
									],
									"query": [
										{
											"key": "llm",
											"value": "false"
										},
										{
											"key": "mock",
											"value": "true"
										},
										{
											"key": "sendFixmeRequest",
											"value": "false"
										},
										{
											"key": "overwrite",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "market/ Copy",
					"item": [
						{
							"name": "purge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"is a non-empty array\", () => {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    pm.expect(jsonData).to.have.length.above(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/market/purge?toKeep=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"market",
										"purge"
									],
									"query": [
										{
											"key": "toKeep",
											"value": "20"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "news/ Copy",
					"item": [
						{
							"name": "purge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"is a non-empty array\", () => {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"    pm.expect(jsonData).to.have.length.above(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/news/purge?toKeep=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"news",
										"purge"
									],
									"query": [
										{
											"key": "toKeep",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "calculator/",
			"item": [
				{
					"name": "cleanup text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"hi\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "cleanup ans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"0\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 1+hello Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'text' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"text\");\r",
									"    pm.expect(body).to.have.property(\"ans\");\r",
									"    pm.expect(body.text).to.be.a(\"string\");\r",
									"    pm.expect(body.ans).to.be.a(\"string\");\r",
									"    pm.expect(body.text).to.eql(\"hi\");\r",
									"    pm.expect(body.ans).to.eql(\"0\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans invalidexpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid expression'\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Invalid expression\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"1+hello\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 1+hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert textMode === true\r",
									"pm.test(\"Body contains textMode: true\", () => {\r",
									"    pm.expect(body.textMode).to.eql(true);\r",
									"});\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'text' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"text\");\r",
									"    pm.expect(body.text).to.be.a(\"string\");\r",
									"    pm.expect(body.text).to.eql(\"1+hello\");\r",
									"    pm.expect(body.ans).to.eql(\"0\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans validexpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains '2'\", () => {\r",
									"    pm.expect(pm.response.json().toString()).to.eql(\"2\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"1 + 1\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert textMode === true\r",
									"pm.test(\"Body contains textMode: false\", () => {\r",
									"    pm.expect(body.textMode).to.eql(false);\r",
									"});\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'ans' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"ans\");\r",
									"    pm.expect(body.ans).to.be.a(\"string\");\r",
									"    pm.expect(body.ans.toString()).to.eql(\"2\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "shopping/",
			"item": [
				{
					"name": "login validuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "shopping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is JSON array\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(Array.isArray(json)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) each element has required properties\r",
									"pm.test(\"Each item has required properties\", () => {\r",
									"\r",
									"    json.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"product\").that.is.an(\"object\");\r",
									"        pm.expect(item.product).to.have.property(\"order\").that.is.a(\"number\");\r",
									"        pm.expect(item.product).to.have.property(\"type\", \"products\");\r",
									"        pm.expect(item.product).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item.product).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(item.product).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"        pm.expect(item.product).to.have.property(\"order\").that.is.a(\"number\");\r",
									"\r",
									"        const category = item.product.category;\r",
									"        if (category && typeof category === \"object\") {\r",
									"            foundObjectCategory = true;\r",
									"            pm.expect(category).to.have.property(\"type\", \"categories\");\r",
									"            pm.expect(category).to.have.property(\"id\").that.is.a(\"number\");\r",
									"            pm.expect(category).to.have.property(\"name\").that.is.a(\"string\");\r",
									"            pm.expect(category).to.have.property(\"order\").that.is.a(\"number\");\r",
									"        } else {\r",
									"            pm.expect(category).to.be.null;\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/shopping/shopping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"shopping"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-possible-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is JSON array\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(Array.isArray(json)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) each element has id, product.name, quantity, productOrder\r",
									"pm.test(\"Each item has required properties\", () => {\r",
									"    json.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"type\", \"categories\");\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(item).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// 4) items are ordered by 'order' property\r",
									"pm.test(\"Items are ordered by 'order'\", () => {\r",
									"    const orders = json.map(item => item.order);\r",
									"    const sorted = [...orders].sort((a, b) => a - b);\r",
									"    pm.expect(orders).to.eql(sorted);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/shopping/get-possible-categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"get-possible-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product actuallynew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is a JSON object\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// 3) object has id, name, rare, category (nullable), and order\r",
									"pm.test(\"Object has required properties\", () => {\r",
									"    pm.expect(json).to.have.property(\"type\", \"products\");\r",
									"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(json).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"    pm.expect(json).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"category\");\r",
									"    pm.expect(json.category).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product1\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 409\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product1\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const p = pm.response.json();\r",
									"pm.test(\"Name updated\", () => pm.expect(p.name).to.eql(\"NewName\"));\r",
									"pm.test(\"Rare flag true\", () => pm.expect(p.isRare).to.be.true);\r",
									"pm.test(\"Category created or assigned\", () => {\r",
									"  pm.expect(p.category).to.include.keys(\"id\",\"name\");\r",
									"  pm.expect(p.category.name).to.eql(\"someNewCat5\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"products\",\r\n    \"id\": 1,\r\n    \"name\": \"NewName\",\r\n    \"isRare\": true,\r\n    \"category\": {\r\n        \"type\": \"categories\",\r\n        \"id\": null,\r\n        \"name\": \"someNewCat5\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product-quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const item = pm.response.json();\r",
									"pm.test(\"Quantity updated\", () => pm.expect(item.quantity).to.eql(42));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"type\": \"products\",\r\n        \"id\": 1\r\n    },\r\n    \"quantity\": 42\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product-quantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product-quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "login unatuhroizedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"default\",\r\n    \"password\": \"default\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 401\", () => pm.response.to.have.status(401));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"products\",\r\n    \"id\": 1,\r\n    \"name\": \"NewName\",\r\n    \"isRare\": true,\r\n    \"category\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-all-product-quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const arr = pm.response.json();\r",
									"pm.test(\"Array returned\", () => pm.expect(arr).to.be.an(\"array\"));\r",
									"pm.test(\"All quantities are 7\", () => {\r",
									"  arr.forEach(i => pm.expect(i.quantity).to.eql(7));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "7",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-all-product-quantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-all-product-quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove-product but already gone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 500\", () => pm.response.to.have.status(500));\r",
									"// then re-GET shopping items to verify\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 23,\r\n    \"type\": \"products\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/remove-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"remove-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-sortables unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-sortables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-sortables"
							]
						}
					},
					"response": []
				},
				{
					"name": "login validuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product actuallynew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is a JSON object\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// 3) object has id, name, rare, category (nullable), and order\r",
									"pm.test(\"Object has required properties\", () => {\r",
									"    pm.expect(json).to.have.property(\"type\", \"products\");\r",
									"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(json).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"    pm.expect(json).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"category\");\r",
									"    pm.expect(json.category).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product2\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-sortables authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const out = pm.response.json();\r",
									"pm.test(\"Returns array same length\", () => pm.expect(out.length).to.eql(2));\r",
									"pm.test(\"Orders updated\", () => {\r",
									"  pm.expect(out.find(x=>x.id===1).order).to.eql(2);\r",
									"  pm.expect(out.find(x=>x.id===2).order).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"products\",\r\n        \"id\": 2\r\n    },\r\n    {\r\n        \"type\": \"products\",\r\n        \"id\": 1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-sortables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-sortables"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sudoku/",
			"item": [
				{
					"name": "sudoku/fetch/sudoku none",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sudoku/fetch/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"fetch",
								"sudoku"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload/suodkus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returns array of Sudokus\", function () {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(Array.isArray(body)).to.be.true;\r",
									"    pm.expect(body.length).to.eql(49);\r",
									"    pm.expect(body[0]).to.have.property(\"state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Grid 01\\r\\n003020600\\r\\n900305001\\r\\n001806400\\r\\n008102900\\r\\n700000008\\r\\n006708200\\r\\n002609500\\r\\n800203009\\r\\n005010300\\r\\nGrid 02\\r\\n200080300\\r\\n060070084\\r\\n030500209\\r\\n000105408\\r\\n000000000\\r\\n402706000\\r\\n301007040\\r\\n720040060\\r\\n004010003\\r\\nGrid 03\\r\\n000000907\\r\\n000420180\\r\\n000705026\\r\\n100904000\\r\\n050000040\\r\\n000507009\\r\\n920108000\\r\\n034059000\\r\\n507000000\\r\\nGrid 04\\r\\n030050040\\r\\n008010500\\r\\n460000012\\r\\n070502080\\r\\n000603000\\r\\n040109030\\r\\n250000098\\r\\n001020600\\r\\n080060020\\r\\nGrid 05\\r\\n020810740\\r\\n700003100\\r\\n090002805\\r\\n009040087\\r\\n400208003\\r\\n160030200\\r\\n302700060\\r\\n005600008\\r\\n076051090\\r\\nGrid 06\\r\\n100920000\\r\\n524010000\\r\\n000000070\\r\\n050008102\\r\\n000000000\\r\\n402700090\\r\\n060000000\\r\\n000030945\\r\\n000071006\\r\\nGrid 07\\r\\n043080250\\r\\n600000000\\r\\n000001094\\r\\n900004070\\r\\n000608000\\r\\n010200003\\r\\n820500000\\r\\n000000005\\r\\n034090710\\r\\nGrid 08\\r\\n480006902\\r\\n002008001\\r\\n900370060\\r\\n840010200\\r\\n003704100\\r\\n001060049\\r\\n020085007\\r\\n700900600\\r\\n609200018\\r\\nGrid 09\\r\\n000900002\\r\\n050123400\\r\\n030000160\\r\\n908000000\\r\\n070000090\\r\\n000000205\\r\\n091000050\\r\\n007439020\\r\\n400007000\\r\\nGrid 10\\r\\n001900003\\r\\n900700160\\r\\n030005007\\r\\n050000009\\r\\n004302600\\r\\n200000070\\r\\n600100030\\r\\n042007006\\r\\n500006800\\r\\nGrid 11\\r\\n000125400\\r\\n008400000\\r\\n420800000\\r\\n030000095\\r\\n060902010\\r\\n510000060\\r\\n000003049\\r\\n000007200\\r\\n001298000\\r\\nGrid 12\\r\\n062340750\\r\\n100005600\\r\\n570000040\\r\\n000094800\\r\\n400000006\\r\\n005830000\\r\\n030000091\\r\\n006400007\\r\\n059083260\\r\\nGrid 13\\r\\n300000000\\r\\n005009000\\r\\n200504000\\r\\n020000700\\r\\n160000058\\r\\n704310600\\r\\n000890100\\r\\n000067080\\r\\n000005437\\r\\nGrid 14\\r\\n630000000\\r\\n000500008\\r\\n005674000\\r\\n000020000\\r\\n003401020\\r\\n000000345\\r\\n000007004\\r\\n080300902\\r\\n947100080\\r\\nGrid 15\\r\\n000020040\\r\\n008035000\\r\\n000070602\\r\\n031046970\\r\\n200000000\\r\\n000501203\\r\\n049000730\\r\\n000000010\\r\\n800004000\\r\\nGrid 16\\r\\n361025900\\r\\n080960010\\r\\n400000057\\r\\n008000471\\r\\n000603000\\r\\n259000800\\r\\n740000005\\r\\n020018060\\r\\n005470329\\r\\nGrid 17\\r\\n050807020\\r\\n600010090\\r\\n702540006\\r\\n070020301\\r\\n504000908\\r\\n103080070\\r\\n900076205\\r\\n060090003\\r\\n080103040\\r\\nGrid 18\\r\\n080005000\\r\\n000003457\\r\\n000070809\\r\\n060400903\\r\\n007010500\\r\\n408007020\\r\\n901020000\\r\\n842300000\\r\\n000100080\\r\\nGrid 19\\r\\n003502900\\r\\n000040000\\r\\n106000305\\r\\n900251008\\r\\n070408030\\r\\n800763001\\r\\n308000104\\r\\n000020000\\r\\n005104800\\r\\nGrid 20\\r\\n000000000\\r\\n009805100\\r\\n051907420\\r\\n290401065\\r\\n000000000\\r\\n140508093\\r\\n026709580\\r\\n005103600\\r\\n000000000\\r\\nGrid 21\\r\\n020030090\\r\\n000907000\\r\\n900208005\\r\\n004806500\\r\\n607000208\\r\\n003102900\\r\\n800605007\\r\\n000309000\\r\\n030020050\\r\\nGrid 22\\r\\n005000006\\r\\n070009020\\r\\n000500107\\r\\n804150000\\r\\n000803000\\r\\n000092805\\r\\n907006000\\r\\n030400010\\r\\n200000600\\r\\nGrid 23\\r\\n040000050\\r\\n001943600\\r\\n009000300\\r\\n600050002\\r\\n103000506\\r\\n800020007\\r\\n005000200\\r\\n002436700\\r\\n030000040\\r\\nGrid 24\\r\\n004000000\\r\\n000030002\\r\\n390700080\\r\\n400009001\\r\\n209801307\\r\\n600200008\\r\\n010008053\\r\\n900040000\\r\\n000000800\\r\\nGrid 25\\r\\n360020089\\r\\n000361000\\r\\n000000000\\r\\n803000602\\r\\n400603007\\r\\n607000108\\r\\n000000000\\r\\n000418000\\r\\n970030014\\r\\nGrid 26\\r\\n500400060\\r\\n009000800\\r\\n640020000\\r\\n000001008\\r\\n208000501\\r\\n700500000\\r\\n000090084\\r\\n003000600\\r\\n060003002\\r\\nGrid 27\\r\\n007256400\\r\\n400000005\\r\\n010030060\\r\\n000508000\\r\\n008060200\\r\\n000107000\\r\\n030070090\\r\\n200000004\\r\\n006312700\\r\\nGrid 28\\r\\n000000000\\r\\n079050180\\r\\n800000007\\r\\n007306800\\r\\n450708096\\r\\n003502700\\r\\n700000005\\r\\n016030420\\r\\n000000000\\r\\nGrid 29\\r\\n030000080\\r\\n009000500\\r\\n007509200\\r\\n700105008\\r\\n020090030\\r\\n900402001\\r\\n004207100\\r\\n002000800\\r\\n070000090\\r\\nGrid 30\\r\\n200170603\\r\\n050000100\\r\\n000006079\\r\\n000040700\\r\\n000801000\\r\\n009050000\\r\\n310400000\\r\\n005000060\\r\\n906037002\\r\\nGrid 31\\r\\n000000080\\r\\n800701040\\r\\n040020030\\r\\n374000900\\r\\n000030000\\r\\n005000321\\r\\n010060050\\r\\n050802006\\r\\n080000000\\r\\nGrid 32\\r\\n000000085\\r\\n000210009\\r\\n960080100\\r\\n500800016\\r\\n000000000\\r\\n890006007\\r\\n009070052\\r\\n300054000\\r\\n480000000\\r\\nGrid 33\\r\\n608070502\\r\\n050608070\\r\\n002000300\\r\\n500090006\\r\\n040302050\\r\\n800050003\\r\\n005000200\\r\\n010704090\\r\\n409060701\\r\\nGrid 34\\r\\n050010040\\r\\n107000602\\r\\n000905000\\r\\n208030501\\r\\n040070020\\r\\n901080406\\r\\n000401000\\r\\n304000709\\r\\n020060010\\r\\nGrid 35\\r\\n053000790\\r\\n009753400\\r\\n100000002\\r\\n090080010\\r\\n000907000\\r\\n080030070\\r\\n500000003\\r\\n007641200\\r\\n061000940\\r\\nGrid 36\\r\\n006080300\\r\\n049070250\\r\\n000405000\\r\\n600317004\\r\\n007000800\\r\\n100826009\\r\\n000702000\\r\\n075040190\\r\\n003090600\\r\\nGrid 37\\r\\n005080700\\r\\n700204005\\r\\n320000084\\r\\n060105040\\r\\n008000500\\r\\n070803010\\r\\n450000091\\r\\n600508007\\r\\n003010600\\r\\nGrid 38\\r\\n000900800\\r\\n128006400\\r\\n070800060\\r\\n800430007\\r\\n500000009\\r\\n600079008\\r\\n090004010\\r\\n003600284\\r\\n001007000\\r\\nGrid 39\\r\\n000080000\\r\\n270000054\\r\\n095000810\\r\\n009806400\\r\\n020403060\\r\\n006905100\\r\\n017000620\\r\\n460000038\\r\\n000090000\\r\\nGrid 40\\r\\n000602000\\r\\n400050001\\r\\n085010620\\r\\n038206710\\r\\n000000000\\r\\n019407350\\r\\n026040530\\r\\n900020007\\r\\n000809000\\r\\nGrid 41\\r\\n000900002\\r\\n050123400\\r\\n030000160\\r\\n908000000\\r\\n070000090\\r\\n000000205\\r\\n091000050\\r\\n007439020\\r\\n400007000\\r\\nGrid 42\\r\\n380000000\\r\\n000400785\\r\\n009020300\\r\\n060090000\\r\\n800302009\\r\\n000040070\\r\\n001070500\\r\\n495006000\\r\\n000000092\\r\\nGrid 43\\r\\n000158000\\r\\n002060800\\r\\n030000040\\r\\n027030510\\r\\n000000000\\r\\n046080790\\r\\n050000080\\r\\n004070100\\r\\n000325000\\r\\nGrid 44\\r\\n010500200\\r\\n900001000\\r\\n002008030\\r\\n500030007\\r\\n008000500\\r\\n600080004\\r\\n040100700\\r\\n000700006\\r\\n003004050\\r\\nGrid 45\\r\\n080000040\\r\\n000469000\\r\\n400000007\\r\\n005904600\\r\\n070608030\\r\\n008502100\\r\\n900000005\\r\\n000781000\\r\\n060000010\\r\\nGrid 46\\r\\n904200007\\r\\n010000000\\r\\n000706500\\r\\n000800090\\r\\n020904060\\r\\n040002000\\r\\n001607000\\r\\n000000030\\r\\n300005702\\r\\nGrid 47\\r\\n000700800\\r\\n006000031\\r\\n040002000\\r\\n024070000\\r\\n010030080\\r\\n000060290\\r\\n000800070\\r\\n860000500\\r\\n002006000\\r\\nGrid 48\\r\\n001007090\\r\\n590080001\\r\\n030000080\\r\\n000005800\\r\\n050060020\\r\\n004100000\\r\\n080000030\\r\\n100020079\\r\\n020700400\\r\\nGrid 49\\r\\n000003017\\r\\n015009008\\r\\n060000000\\r\\n100007000\\r\\n009000200\\r\\n000500004\\r\\n000000020\\r\\n500600340\\r\\n340200000\\r\\nGrid 50\\r\\n300200000\\r\\n000107000\\r\\n706030500\\r\\n070009080\\r\\n900020004\\r\\n010800050\\r\\n009040301\\r\\n000702000\\r\\n000008006\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/upload/sudokus",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"upload",
								"sudokus"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload/suodkus again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returns array of Sudokus\", function () {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(Array.isArray(body)).to.be.true;\r",
									"    pm.expect(body.length).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"Grid 01\\r\\n003020600\\r\\n900305001\\r\\n001806400\\r\\n008102900\\r\\n700000008\\r\\n006708200\\r\\n002609500\\r\\n800203009\\r\\n005010300\\r\\nGrid 02\\r\\n200080300\\r\\n060070084\\r\\n030500209\\r\\n000105408\\r\\n000000000\\r\\n402706000\\r\\n301007040\\r\\n720040060\\r\\n004010003\\r\\nGrid 03\\r\\n000000907\\r\\n000420180\\r\\n000705026\\r\\n100904000\\r\\n050000040\\r\\n000507009\\r\\n920108000\\r\\n034059000\\r\\n507000000\\r\\nGrid 04\\r\\n030050040\\r\\n008010500\\r\\n460000012\\r\\n070502080\\r\\n000603000\\r\\n040109030\\r\\n250000098\\r\\n001020600\\r\\n080060020\\r\\nGrid 05\\r\\n020810740\\r\\n700003100\\r\\n090002805\\r\\n009040087\\r\\n400208003\\r\\n160030200\\r\\n302700060\\r\\n005600008\\r\\n076051090\\r\\nGrid 06\\r\\n100920000\\r\\n524010000\\r\\n000000070\\r\\n050008102\\r\\n000000000\\r\\n402700090\\r\\n060000000\\r\\n000030945\\r\\n000071006\\r\\nGrid 07\\r\\n043080250\\r\\n600000000\\r\\n000001094\\r\\n900004070\\r\\n000608000\\r\\n010200003\\r\\n820500000\\r\\n000000005\\r\\n034090710\\r\\nGrid 08\\r\\n480006902\\r\\n002008001\\r\\n900370060\\r\\n840010200\\r\\n003704100\\r\\n001060049\\r\\n020085007\\r\\n700900600\\r\\n609200018\\r\\nGrid 09\\r\\n000900002\\r\\n050123400\\r\\n030000160\\r\\n908000000\\r\\n070000090\\r\\n000000205\\r\\n091000050\\r\\n007439020\\r\\n400007000\\r\\nGrid 10\\r\\n001900003\\r\\n900700160\\r\\n030005007\\r\\n050000009\\r\\n004302600\\r\\n200000070\\r\\n600100030\\r\\n042007006\\r\\n500006800\\r\\nGrid 11\\r\\n000125400\\r\\n008400000\\r\\n420800000\\r\\n030000095\\r\\n060902010\\r\\n510000060\\r\\n000003049\\r\\n000007200\\r\\n001298000\\r\\nGrid 12\\r\\n062340750\\r\\n100005600\\r\\n570000040\\r\\n000094800\\r\\n400000006\\r\\n005830000\\r\\n030000091\\r\\n006400007\\r\\n059083260\\r\\nGrid 13\\r\\n300000000\\r\\n005009000\\r\\n200504000\\r\\n020000700\\r\\n160000058\\r\\n704310600\\r\\n000890100\\r\\n000067080\\r\\n000005437\\r\\nGrid 14\\r\\n630000000\\r\\n000500008\\r\\n005674000\\r\\n000020000\\r\\n003401020\\r\\n000000345\\r\\n000007004\\r\\n080300902\\r\\n947100080\\r\\nGrid 15\\r\\n000020040\\r\\n008035000\\r\\n000070602\\r\\n031046970\\r\\n200000000\\r\\n000501203\\r\\n049000730\\r\\n000000010\\r\\n800004000\\r\\nGrid 16\\r\\n361025900\\r\\n080960010\\r\\n400000057\\r\\n008000471\\r\\n000603000\\r\\n259000800\\r\\n740000005\\r\\n020018060\\r\\n005470329\\r\\nGrid 17\\r\\n050807020\\r\\n600010090\\r\\n702540006\\r\\n070020301\\r\\n504000908\\r\\n103080070\\r\\n900076205\\r\\n060090003\\r\\n080103040\\r\\nGrid 18\\r\\n080005000\\r\\n000003457\\r\\n000070809\\r\\n060400903\\r\\n007010500\\r\\n408007020\\r\\n901020000\\r\\n842300000\\r\\n000100080\\r\\nGrid 19\\r\\n003502900\\r\\n000040000\\r\\n106000305\\r\\n900251008\\r\\n070408030\\r\\n800763001\\r\\n308000104\\r\\n000020000\\r\\n005104800\\r\\nGrid 20\\r\\n000000000\\r\\n009805100\\r\\n051907420\\r\\n290401065\\r\\n000000000\\r\\n140508093\\r\\n026709580\\r\\n005103600\\r\\n000000000\\r\\nGrid 21\\r\\n020030090\\r\\n000907000\\r\\n900208005\\r\\n004806500\\r\\n607000208\\r\\n003102900\\r\\n800605007\\r\\n000309000\\r\\n030020050\\r\\nGrid 22\\r\\n005000006\\r\\n070009020\\r\\n000500107\\r\\n804150000\\r\\n000803000\\r\\n000092805\\r\\n907006000\\r\\n030400010\\r\\n200000600\\r\\nGrid 23\\r\\n040000050\\r\\n001943600\\r\\n009000300\\r\\n600050002\\r\\n103000506\\r\\n800020007\\r\\n005000200\\r\\n002436700\\r\\n030000040\\r\\nGrid 24\\r\\n004000000\\r\\n000030002\\r\\n390700080\\r\\n400009001\\r\\n209801307\\r\\n600200008\\r\\n010008053\\r\\n900040000\\r\\n000000800\\r\\nGrid 25\\r\\n360020089\\r\\n000361000\\r\\n000000000\\r\\n803000602\\r\\n400603007\\r\\n607000108\\r\\n000000000\\r\\n000418000\\r\\n970030014\\r\\nGrid 26\\r\\n500400060\\r\\n009000800\\r\\n640020000\\r\\n000001008\\r\\n208000501\\r\\n700500000\\r\\n000090084\\r\\n003000600\\r\\n060003002\\r\\nGrid 27\\r\\n007256400\\r\\n400000005\\r\\n010030060\\r\\n000508000\\r\\n008060200\\r\\n000107000\\r\\n030070090\\r\\n200000004\\r\\n006312700\\r\\nGrid 28\\r\\n000000000\\r\\n079050180\\r\\n800000007\\r\\n007306800\\r\\n450708096\\r\\n003502700\\r\\n700000005\\r\\n016030420\\r\\n000000000\\r\\nGrid 29\\r\\n030000080\\r\\n009000500\\r\\n007509200\\r\\n700105008\\r\\n020090030\\r\\n900402001\\r\\n004207100\\r\\n002000800\\r\\n070000090\\r\\nGrid 30\\r\\n200170603\\r\\n050000100\\r\\n000006079\\r\\n000040700\\r\\n000801000\\r\\n009050000\\r\\n310400000\\r\\n005000060\\r\\n906037002\\r\\nGrid 31\\r\\n000000080\\r\\n800701040\\r\\n040020030\\r\\n374000900\\r\\n000030000\\r\\n005000321\\r\\n010060050\\r\\n050802006\\r\\n080000000\\r\\nGrid 32\\r\\n000000085\\r\\n000210009\\r\\n960080100\\r\\n500800016\\r\\n000000000\\r\\n890006007\\r\\n009070052\\r\\n300054000\\r\\n480000000\\r\\nGrid 33\\r\\n608070502\\r\\n050608070\\r\\n002000300\\r\\n500090006\\r\\n040302050\\r\\n800050003\\r\\n005000200\\r\\n010704090\\r\\n409060701\\r\\nGrid 34\\r\\n050010040\\r\\n107000602\\r\\n000905000\\r\\n208030501\\r\\n040070020\\r\\n901080406\\r\\n000401000\\r\\n304000709\\r\\n020060010\\r\\nGrid 35\\r\\n053000790\\r\\n009753400\\r\\n100000002\\r\\n090080010\\r\\n000907000\\r\\n080030070\\r\\n500000003\\r\\n007641200\\r\\n061000940\\r\\nGrid 36\\r\\n006080300\\r\\n049070250\\r\\n000405000\\r\\n600317004\\r\\n007000800\\r\\n100826009\\r\\n000702000\\r\\n075040190\\r\\n003090600\\r\\nGrid 37\\r\\n005080700\\r\\n700204005\\r\\n320000084\\r\\n060105040\\r\\n008000500\\r\\n070803010\\r\\n450000091\\r\\n600508007\\r\\n003010600\\r\\nGrid 38\\r\\n000900800\\r\\n128006400\\r\\n070800060\\r\\n800430007\\r\\n500000009\\r\\n600079008\\r\\n090004010\\r\\n003600284\\r\\n001007000\\r\\nGrid 39\\r\\n000080000\\r\\n270000054\\r\\n095000810\\r\\n009806400\\r\\n020403060\\r\\n006905100\\r\\n017000620\\r\\n460000038\\r\\n000090000\\r\\nGrid 40\\r\\n000602000\\r\\n400050001\\r\\n085010620\\r\\n038206710\\r\\n000000000\\r\\n019407350\\r\\n026040530\\r\\n900020007\\r\\n000809000\\r\\nGrid 41\\r\\n000900002\\r\\n050123400\\r\\n030000160\\r\\n908000000\\r\\n070000090\\r\\n000000205\\r\\n091000050\\r\\n007439020\\r\\n400007000\\r\\nGrid 42\\r\\n380000000\\r\\n000400785\\r\\n009020300\\r\\n060090000\\r\\n800302009\\r\\n000040070\\r\\n001070500\\r\\n495006000\\r\\n000000092\\r\\nGrid 43\\r\\n000158000\\r\\n002060800\\r\\n030000040\\r\\n027030510\\r\\n000000000\\r\\n046080790\\r\\n050000080\\r\\n004070100\\r\\n000325000\\r\\nGrid 44\\r\\n010500200\\r\\n900001000\\r\\n002008030\\r\\n500030007\\r\\n008000500\\r\\n600080004\\r\\n040100700\\r\\n000700006\\r\\n003004050\\r\\nGrid 45\\r\\n080000040\\r\\n000469000\\r\\n400000007\\r\\n005904600\\r\\n070608030\\r\\n008502100\\r\\n900000005\\r\\n000781000\\r\\n060000010\\r\\nGrid 46\\r\\n904200007\\r\\n010000000\\r\\n000706500\\r\\n000800090\\r\\n020904060\\r\\n040002000\\r\\n001607000\\r\\n000000030\\r\\n300005702\\r\\nGrid 47\\r\\n000700800\\r\\n006000031\\r\\n040002000\\r\\n024070000\\r\\n010030080\\r\\n000060290\\r\\n000800070\\r\\n860000500\\r\\n002006000\\r\\nGrid 48\\r\\n001007090\\r\\n590080001\\r\\n030000080\\r\\n000005800\\r\\n050060020\\r\\n004100000\\r\\n080000030\\r\\n100020079\\r\\n020700400\\r\\nGrid 49\\r\\n000003017\\r\\n015009008\\r\\n060000000\\r\\n100007000\\r\\n009000200\\r\\n000500004\\r\\n000000020\\r\\n500600340\\r\\n340200000\\r\\nGrid 50\\r\\n300200000\\r\\n000107000\\r\\n706030500\\r\\n070009080\\r\\n900020004\\r\\n010800050\\r\\n009040301\\r\\n000702000\\r\\n000008006\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/upload/sudokus",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"upload",
								"sudokus"
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/fetch/sudoku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Sudoku object returned\", function () {\r",
									"    const s = pm.response.json();\r",
									"    pm.expect(s).to.have.property(\"state\");\r",
									"    pm.expect(s.state.length).to.equal(81);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sudoku/fetch/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"fetch",
								"sudoku"
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/generate/sudoku?difficulty=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Generated Sudoku has state\", function () {\r",
									"    const s = pm.response.json();\r",
									"    pm.expect(s).to.have.property(\"state\");\r",
									"    pm.expect(s.state.length).to.equal(81);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sudoku/generate/sudoku?difficulty=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"generate",
								"sudoku"
							],
							"query": [
								{
									"key": "difficulty",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/solve/sudoku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Sudoku was solved\", function () {\r",
									"    const solved = pm.response.json();\r",
									"    pm.expect(solved).to.have.property(\"state\");\r",
									"    pm.expect(solved.state.filter(x => x === 0).length).to.equal(0); // No zeros\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"state\": [\r\n        9,\r\n        3,\r\n        4,\r\n        6,\r\n        8,\r\n        5,\r\n        1,\r\n        2,\r\n        7,\r\n        6,\r\n        2,\r\n        8,\r\n        3,\r\n        0,\r\n        1,\r\n        5,\r\n        4,\r\n        9,\r\n        0,\r\n        7,\r\n        1,\r\n        4,\r\n        2,\r\n        9,\r\n        0,\r\n        6,\r\n        3,\r\n        0,\r\n        1,\r\n        5,\r\n        9,\r\n        4,\r\n        6,\r\n        0,\r\n        0,\r\n        2,\r\n        7,\r\n        6,\r\n        0,\r\n        5,\r\n        3,\r\n        2,\r\n        4,\r\n        1,\r\n        0,\r\n        3,\r\n        4,\r\n        0,\r\n        7,\r\n        1,\r\n        8,\r\n        6,\r\n        9,\r\n        5,\r\n        2,\r\n        0,\r\n        7,\r\n        8,\r\n        6,\r\n        4,\r\n        3,\r\n        5,\r\n        0,\r\n        0,\r\n        8,\r\n        6,\r\n        0,\r\n        5,\r\n        3,\r\n        9,\r\n        0,\r\n        4,\r\n        0,\r\n        5,\r\n        3,\r\n        1,\r\n        9,\r\n        7,\r\n        0,\r\n        8,\r\n        6\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/solve/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"solve",
								"sudoku"
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/check/sudoku right",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200 and returns boolean\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const result = pm.response.json();\r",
									"    pm.expect(result).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"state\": [\r\n            8,\r\n            9,\r\n            0,\r\n            6,\r\n            7,\r\n            4,\r\n            0,\r\n            2,\r\n            3,\r\n            4,\r\n            3,\r\n            5,\r\n            9,\r\n            0,\r\n            2,\r\n            0,\r\n            6,\r\n            7,\r\n            2,\r\n            7,\r\n            0,\r\n            5,\r\n            8,\r\n            3,\r\n            1,\r\n            0,\r\n            9,\r\n            5,\r\n            6,\r\n            3,\r\n            0,\r\n            4,\r\n            1,\r\n            9,\r\n            7,\r\n            8,\r\n            1,\r\n            4,\r\n            8,\r\n            3,\r\n            9,\r\n            7,\r\n            6,\r\n            5,\r\n            2,\r\n            7,\r\n            2,\r\n            9,\r\n            8,\r\n            0,\r\n            6,\r\n            0,\r\n            0,\r\n            0,\r\n            6,\r\n            0,\r\n            7,\r\n            1,\r\n            0,\r\n            9,\r\n            3,\r\n            8,\r\n            4,\r\n            3,\r\n            1,\r\n            2,\r\n            0,\r\n            6,\r\n            8,\r\n            7,\r\n            9,\r\n            0,\r\n            9,\r\n            8,\r\n            4,\r\n            0,\r\n            3,\r\n            5,\r\n            2,\r\n            1,\r\n            6\r\n        ]\r\n    },\r\n    {\r\n        \"state\": [\r\n            8,\r\n            9,\r\n            0,\r\n            6,\r\n            7,\r\n            4,\r\n            0,\r\n            2,\r\n            3,\r\n            4,\r\n            3,\r\n            5,\r\n            9,\r\n            0,\r\n            2,\r\n            0,\r\n            6,\r\n            7,\r\n            2,\r\n            7,\r\n            0,\r\n            5,\r\n            8,\r\n            3,\r\n            1,\r\n            0,\r\n            9,\r\n            5,\r\n            6,\r\n            3,\r\n            0,\r\n            4,\r\n            1,\r\n            9,\r\n            7,\r\n            8,\r\n            1,\r\n            4,\r\n            8,\r\n            3,\r\n            9,\r\n            7,\r\n            6,\r\n            5,\r\n            2,\r\n            7,\r\n            2,\r\n            9,\r\n            8,\r\n            0,\r\n            6,\r\n            0,\r\n            0,\r\n            0,\r\n            6,\r\n            0,\r\n            7,\r\n            1,\r\n            0,\r\n            9,\r\n            3,\r\n            8,\r\n            4,\r\n            3,\r\n            1,\r\n            2,\r\n            0,\r\n            6,\r\n            8,\r\n            7,\r\n            9,\r\n            0,\r\n            9,\r\n            8,\r\n            4,\r\n            0,\r\n            3,\r\n            5,\r\n            2,\r\n            1,\r\n            6\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/check/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"check",
								"sudoku"
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/check/sudoku wrong",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200 and returns boolean\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const result = pm.response.json();\r",
									"    pm.expect(result).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"state\": [\r\n            8,\r\n            9,\r\n            0,\r\n            6,\r\n            7,\r\n            4,\r\n            0,\r\n            2,\r\n            3,\r\n            4,\r\n            3,\r\n            5,\r\n            9,\r\n            0,\r\n            2,\r\n            0,\r\n            6,\r\n            7,\r\n            2,\r\n            7,\r\n            0,\r\n            5,\r\n            8,\r\n            3,\r\n            1,\r\n            0,\r\n            9,\r\n            5,\r\n            6,\r\n            3,\r\n            0,\r\n            4,\r\n            1,\r\n            9,\r\n            7,\r\n            8,\r\n            1,\r\n            4,\r\n            8,\r\n            3,\r\n            9,\r\n            7,\r\n            6,\r\n            5,\r\n            2,\r\n            7,\r\n            2,\r\n            9,\r\n            8,\r\n            0,\r\n            6,\r\n            0,\r\n            0,\r\n            0,\r\n            6,\r\n            0,\r\n            7,\r\n            1,\r\n            0,\r\n            9,\r\n            3,\r\n            8,\r\n            4,\r\n            3,\r\n            1,\r\n            2,\r\n            0,\r\n            6,\r\n            8,\r\n            7,\r\n            9,\r\n            0,\r\n            9,\r\n            8,\r\n            4,\r\n            0,\r\n            3,\r\n            5,\r\n            2,\r\n            1,\r\n            6\r\n        ]\r\n    },\r\n    {\r\n        \"state\": [\r\n            8,\r\n            9,\r\n            9,\r\n            6,\r\n            7,\r\n            4,\r\n            0,\r\n            2,\r\n            3,\r\n            4,\r\n            3,\r\n            5,\r\n            9,\r\n            0,\r\n            2,\r\n            0,\r\n            6,\r\n            7,\r\n            2,\r\n            7,\r\n            0,\r\n            5,\r\n            8,\r\n            3,\r\n            1,\r\n            0,\r\n            9,\r\n            5,\r\n            6,\r\n            3,\r\n            0,\r\n            4,\r\n            1,\r\n            9,\r\n            7,\r\n            8,\r\n            1,\r\n            4,\r\n            8,\r\n            3,\r\n            9,\r\n            7,\r\n            6,\r\n            5,\r\n            2,\r\n            7,\r\n            2,\r\n            9,\r\n            8,\r\n            0,\r\n            6,\r\n            0,\r\n            0,\r\n            0,\r\n            6,\r\n            0,\r\n            7,\r\n            1,\r\n            0,\r\n            9,\r\n            3,\r\n            8,\r\n            4,\r\n            3,\r\n            1,\r\n            2,\r\n            0,\r\n            6,\r\n            8,\r\n            7,\r\n            9,\r\n            0,\r\n            9,\r\n            8,\r\n            4,\r\n            0,\r\n            3,\r\n            5,\r\n            2,\r\n            1,\r\n            6\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/check/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"check",
								"sudoku"
							]
						}
					},
					"response": []
				},
				{
					"name": "sudoku/check/sudoku Infinite solutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 422 and returns boolean\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"state\": [\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0\r\n        ]\r\n    },\r\n    {\r\n        \"state\": [\r\n            8,\r\n            9,\r\n            0,\r\n            6,\r\n            7,\r\n            4,\r\n            0,\r\n            2,\r\n            3,\r\n            4,\r\n            3,\r\n            5,\r\n            9,\r\n            0,\r\n            2,\r\n            0,\r\n            6,\r\n            7,\r\n            2,\r\n            7,\r\n            0,\r\n            5,\r\n            8,\r\n            3,\r\n            1,\r\n            0,\r\n            9,\r\n            5,\r\n            6,\r\n            3,\r\n            0,\r\n            4,\r\n            1,\r\n            9,\r\n            7,\r\n            8,\r\n            1,\r\n            4,\r\n            8,\r\n            3,\r\n            9,\r\n            7,\r\n            6,\r\n            5,\r\n            2,\r\n            7,\r\n            2,\r\n            9,\r\n            8,\r\n            0,\r\n            6,\r\n            0,\r\n            0,\r\n            0,\r\n            6,\r\n            0,\r\n            7,\r\n            1,\r\n            0,\r\n            9,\r\n            3,\r\n            8,\r\n            4,\r\n            3,\r\n            1,\r\n            2,\r\n            0,\r\n            6,\r\n            8,\r\n            7,\r\n            9,\r\n            0,\r\n            9,\r\n            8,\r\n            4,\r\n            0,\r\n            3,\r\n            5,\r\n            2,\r\n            1,\r\n            6\r\n        ]\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sudoku/check/sudoku",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sudoku",
								"check",
								"sudoku"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "user",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "SPRING_PASSWORD",
			"value": "",
			"type": "string"
		},
		{
			"key": "SPRING_PASSWORD",
			"value": "",
			"type": "default"
		}
	]
}