{
	"info": {
		"_postman_id": "db5d5aad-cdee-4389-9090-7a8e27630baf",
		"name": "webapp",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44440825",
		"_collection_link": "https://johndoe-483049.postman.co/workspace/John-Doe's-Workspace~66114b17-ce92-4db7-8551-7be733093137/collection/44440825-db5d5aad-cdee-4389-9090-7a8e27630baf?action=share&source=collection_link&creator=44440825"
	},
	"item": [
		{
			"name": "authentication/ needs removedCookie",
			"item": [
				{
					"name": "valid user",
					"item": [
						{
							"name": "login validuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
											"if (pm.cookies.has(\"authToken\")) {\r",
											"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "check-auth validuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.cookies.clear();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/authentication/check-auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"check-auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalid user",
					"item": [
						{
							"name": "login invaliduser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => pm.response.to.have.status(403));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"wrongPass\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/authentication/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "check-auth invaliduser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => pm.response.to.have.status(403));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/authentication/check-auth",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"authentication",
										"check-auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "tradingbot",
			"item": [
				{
					"name": "market/",
					"item": [
						{
							"name": "AAPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Symbol is AAPL\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.symbol).to.eql(\"AAPL\");\r",
											"});\r",
											"\r",
											"pm.test(\"Price is not null\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.price).to.not.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"Date is not null and is today\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.date).to.not.be.null;\r",
											"\r",
											"    const today = new Date();\r",
											"    const expectedDate = [\r",
											"        today.getFullYear(),\r",
											"        today.getMonth() + 1,\r",
											"        today.getDate()\r",
											"    ];\r",
											"\r",
											"    pm.expect(jsonData.date).to.eql(expectedDate);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/market/AAPL",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"market",
										"AAPL"
									]
								}
							},
							"response": []
						},
						{
							"name": "historic/AAPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Contains item for yesterday and 8 days ago\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    const now = new Date();\r",
											"    const yesterday = new Date(now);\r",
											"    const eightDaysAgo = new Date(now);\r",
											"    yesterday.setDate(now.getDate() - 1);\r",
											"    eightDaysAgo.setDate(now.getDate() - 8);\r",
											"\r",
											"    const toArray = (d) => [d.getFullYear(), d.getMonth() + 1, d.getDate()];\r",
											"\r",
											"    const yesterdayArray = toArray(yesterday);\r",
											"    const eightDaysAgoArray = toArray(eightDaysAgo);\r",
											"\r",
											"    const hasYesterday = jsonData.some(item => JSON.stringify(item.date) === JSON.stringify(yesterdayArray));\r",
											"    const hasEightDaysAgo = jsonData.some(item => JSON.stringify(item.date) === JSON.stringify(eightDaysAgoArray));\r",
											"\r",
											"    pm.expect(hasYesterday).to.be.true;\r",
											"    pm.expect(hasEightDaysAgo).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Each item has symbol AAPL and price not null\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    jsonData.forEach(item => {\r",
											"        pm.expect(item.symbol).to.eql(\"AAPL\");\r",
											"        pm.expect(item.price).to.not.be.null;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/market/historic/IBM",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"market",
										"historic",
										"IBM"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "news/",
					"item": [
						{
							"name": "AAPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", () => {\r",
											"  pm.expect(data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Define yesterday's date in [YYYY, M, D] format\r",
											"const now = new Date();\r",
											"const yesterday = new Date(now);\r",
											"yesterday.setDate(now.getDate() - 1);\r",
											"const expectedDate = [\r",
											"  yesterday.getFullYear(),\r",
											"  yesterday.getMonth() + 1,\r",
											"  yesterday.getDate()\r",
											"];\r",
											"\r",
											"pm.test(\"All items are from yesterday or today\", () => {\r",
											"  const now = new Date();\r",
											"  const today = [now.getFullYear(), now.getMonth() + 1, now.getDate()];\r",
											"\r",
											"  const yesterday = new Date(now);\r",
											"  yesterday.setDate(yesterday.getDate() - 1);\r",
											"  const yesterdayArr = [yesterday.getFullYear(), yesterday.getMonth() + 1, yesterday.getDate()];\r",
											"\r",
											"  data.forEach(item => {\r",
											"    const [y, m, d] = item.date;\r",
											"    const itemDate = [y, m, d];\r",
											"\r",
											"    const isToday = itemDate[0] === today[0] && itemDate[1] === today[1] && itemDate[2] === today[2];\r",
											"    const isYesterday = itemDate[0] === yesterdayArr[0] && itemDate[1] === yesterdayArr[1] && itemDate[2] === yesterdayArr[2];\r",
											"\r",
											"    pm.expect(isToday || isYesterday, `item.date was ${itemDate}, expected today or yesterday`).to.be.true;\r",
											"  });\r",
											"});\r",
											"\r",
											"pm.test(\"Every item has externalId, symbol AAPL, and headline not null\", () => {\r",
											"  data.forEach(item => {\r",
											"    pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
											"    pm.expect(item.symbol, \"symbol\").to.eql(\"AAPL\");\r",
											"    pm.expect(item.headline, \"headline\").to.not.be.null;\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/news/AAPL",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"news",
										"AAPL"
									]
								}
							},
							"response": []
						},
						{
							"name": "historic/AAPL/2025-04-20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"pm.test(\"Response is an array\", () => {\r",
											"  pm.expect(Array.isArray(data)).to.be.true;\r",
											"});\r",
											"\r",
											"// build numeric YYYYMMDD values for today and yesterday\r",
											"const now = new Date();\r",
											"const todayNum = now.getFullYear()*10000 + (now.getMonth()+1)*100 + now.getDate();\r",
											"const yest = new Date(now);\r",
											"yest.setDate(now.getDate()-1);\r",
											"const yestNum = yest.getFullYear()*10000 + (yest.getMonth()+1)*100 + yest.getDate();\r",
											"\r",
											"// build required oldest numeric\r",
											"const reqOldestNum = 2025*10000 + 4*100 + 20;\r",
											"\r",
											"// extract numeric dates from items\r",
											"const nums = data.map(item => {\r",
											"  const d = item.date;\r",
											"  return d[0]*10000 + d[1]*100 + d[2];\r",
											"});\r",
											"\r",
											"// check oldest exactly 2024-04-04\r",
											"pm.test(\"Oldest is 2024-04-04\", () => {\r",
											"  const min = Math.min(...nums);\r",
											"  pm.expect(min).to.eql(reqOldestNum);\r",
											"});\r",
											"\r",
											"// check newest is today or yesterday\r",
											"pm.test(\"Newest is today or yesterday\", () => {\r",
											"  const max = Math.max(...nums);\r",
											"  pm.expect(max === todayNum || max === yestNum).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Every item has externalId, symbol AAPL, and headline not null\", () => {\r",
											"  data.forEach(item => {\r",
											"    pm.expect(item.externalId, \"externalId\").to.not.be.null;\r",
											"    pm.expect(item.symbol, \"symbol\").to.eql(\"AAPL\");\r",
											"    pm.expect(item.headline, \"headline\").to.not.be.null;\r",
											"  });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/news/historic/AAPL/2025-04-20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"news",
										"historic",
										"AAPL",
										"2025-04-20"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "embeddings/",
					"item": [
						{
							"name": "50",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate HTTP response\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse body\r",
											"const news = pm.response.json();\r",
											"\r",
											"// Validate itâ€™s a single object, not an array\r",
											"pm.test(\"Response is a single object\", () => {\r",
											"    pm.expect(news).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"symbol is AAPL\", () => {\r",
											"    pm.expect(news.symbol).to.eql(\"AAPL\");\r",
											"});\r",
											"\r",
											"// id must equal 50\r",
											"pm.test(\"id is 50\", () => {\r",
											"    pm.expect(news.id).to.eql(50);\r",
											"});\r",
											"\r",
											"// embeddings must be an array of length 3072\r",
											"pm.test(\"embeddings is an array of length 3072\", () => {\r",
											"    pm.expect(news.embeddings).to.be.an(\"array\");\r",
											"    pm.expect(news.embeddings.length).to.eql(3072);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/embeddings/50",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"embeddings",
										"50"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "calculator/",
			"item": [
				{
					"name": "cleanup text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"hi\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "cleanup ans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"0\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 1+hello Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'text' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"text\");\r",
									"    pm.expect(body).to.have.property(\"ans\");\r",
									"    pm.expect(body.text).to.be.a(\"string\");\r",
									"    pm.expect(body.ans).to.be.a(\"string\");\r",
									"    pm.expect(body.text).to.eql(\"hi\");\r",
									"    pm.expect(body.ans).to.eql(\"0\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans invalidexpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains 'Invalid expression'\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Invalid expression\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"1+hello\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 1+hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert textMode === true\r",
									"pm.test(\"Body contains textMode: true\", () => {\r",
									"    pm.expect(body.textMode).to.eql(true);\r",
									"});\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'text' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"text\");\r",
									"    pm.expect(body.text).to.be.a(\"string\");\r",
									"    pm.expect(body.text).to.eql(\"1+hello\");\r",
									"    pm.expect(body.ans).to.eql(\"0\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans validexpression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains '2'\", () => {\r",
									"    pm.expect(pm.response.json().toString()).to.eql(\"2\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"1 + 1\"",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				},
				{
					"name": "ans 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"// assert textMode === true\r",
									"pm.test(\"Body contains textMode: false\", () => {\r",
									"    pm.expect(body.textMode).to.eql(false);\r",
									"});\r",
									"\r",
									"// assert that the 'text' property exists and is a string\r",
									"pm.test(\"Body has a 'ans' property\", () => {\r",
									"    pm.expect(body).to.have.property(\"ans\");\r",
									"    pm.expect(body.ans).to.be.a(\"string\");\r",
									"    pm.expect(body.ans.toString()).to.eql(\"2\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/calculator/ans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"calculator",
								"ans"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "shopping/",
			"item": [
				{
					"name": "login validuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "shopping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is JSON array\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(Array.isArray(json)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) each element has required properties\r",
									"pm.test(\"Each item has required properties\", () => {\r",
									"\r",
									"    json.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"\r",
									"        pm.expect(item).to.have.property(\"product\").that.is.an(\"object\");\r",
									"        pm.expect(item.product).to.have.property(\"order\").that.is.a(\"number\");\r",
									"        pm.expect(item.product).to.have.property(\"type\", \"products\");\r",
									"        pm.expect(item.product).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item.product).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(item.product).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"        pm.expect(item.product).to.have.property(\"order\").that.is.a(\"number\");\r",
									"\r",
									"        const category = item.product.category;\r",
									"        if (category && typeof category === \"object\") {\r",
									"            foundObjectCategory = true;\r",
									"            pm.expect(category).to.have.property(\"type\", \"categories\");\r",
									"            pm.expect(category).to.have.property(\"id\").that.is.a(\"number\");\r",
									"            pm.expect(category).to.have.property(\"name\").that.is.a(\"string\");\r",
									"            pm.expect(category).to.have.property(\"order\").that.is.a(\"number\");\r",
									"        } else {\r",
									"            pm.expect(category).to.be.null;\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/shopping/shopping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"shopping"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-possible-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is JSON array\r",
									"let json = pm.response.json();\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(Array.isArray(json)).to.be.true;\r",
									"});\r",
									"\r",
									"// 3) each element has id, product.name, quantity, productOrder\r",
									"pm.test(\"Each item has required properties\", () => {\r",
									"    json.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"type\", \"categories\");\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        pm.expect(item).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// 4) items are ordered by 'order' property\r",
									"pm.test(\"Items are ordered by 'order'\", () => {\r",
									"    const orders = json.map(item => item.order);\r",
									"    const sorted = [...orders].sort((a, b) => a - b);\r",
									"    pm.expect(orders).to.eql(sorted);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/shopping/get-possible-categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"get-possible-categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product actuallynew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is a JSON object\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// 3) object has id, name, rare, category (nullable), and order\r",
									"pm.test(\"Object has required properties\", () => {\r",
									"    pm.expect(json).to.have.property(\"type\", \"products\");\r",
									"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(json).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"    pm.expect(json).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"category\");\r",
									"    pm.expect(json.category).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product1\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 409\", () => {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product1\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const p = pm.response.json();\r",
									"pm.test(\"Name updated\", () => pm.expect(p.name).to.eql(\"NewName\"));\r",
									"pm.test(\"Rare flag true\", () => pm.expect(p.isRare).to.be.true);\r",
									"pm.test(\"Category created or assigned\", () => {\r",
									"  pm.expect(p.category).to.include.keys(\"id\",\"name\");\r",
									"  pm.expect(p.category.name).to.eql(\"someNewCat5\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"products\",\r\n    \"id\": 1,\r\n    \"name\": \"NewName\",\r\n    \"isRare\": true,\r\n    \"category\": {\r\n        \"type\": \"categories\",\r\n        \"id\": null,\r\n        \"name\": \"someNewCat5\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product-quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const item = pm.response.json();\r",
									"pm.test(\"Quantity updated\", () => pm.expect(item.quantity).to.eql(42));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"type\": \"products\",\r\n        \"id\": 1\r\n    },\r\n    \"quantity\": 42\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product-quantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product-quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "login unatuhroizedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"default\",\r\n    \"password\": \"default\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-product unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 401\", () => pm.response.to.have.status(401));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"products\",\r\n    \"id\": 1,\r\n    \"name\": \"NewName\",\r\n    \"isRare\": true,\r\n    \"category\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-all-product-quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"const arr = pm.response.json();\r",
									"pm.test(\"Array returned\", () => pm.expect(arr).to.be.an(\"array\"));\r",
									"pm.test(\"All quantities are 7\", () => {\r",
									"  arr.forEach(i => pm.expect(i.quantity).to.eql(7));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "7",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-all-product-quantity",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-all-product-quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove-product but already gone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 500\", () => pm.response.to.have.status(500));\r",
									"// then re-GET shopping items to verify\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 23,\r\n    \"type\": \"products\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/remove-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"remove-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-sortables unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-sortables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-sortables"
							]
						}
					},
					"response": []
				},
				{
					"name": "login validuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									"pm.test(\"authToken cookie set\", () => pm.expect(pm.cookies.has(\"authToken\")).to.be.true);\r",
									"if (pm.cookies.has(\"authToken\")) {\r",
									"    pm.environment.set(\"authToken\", pm.cookies.get(\"authToken\"));\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/authentication/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"authentication",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "new-product actuallynew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) status is 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) body is a JSON object\r",
									"const json = pm.response.json();\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(json).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// 3) object has id, name, rare, category (nullable), and order\r",
									"pm.test(\"Object has required properties\", () => {\r",
									"    pm.expect(json).to.have.property(\"type\", \"products\");\r",
									"    pm.expect(json).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(json).to.have.property(\"isRare\").that.is.a(\"boolean\");\r",
									"    pm.expect(json).to.have.property(\"order\").that.is.a(\"number\");\r",
									"    pm.expect(json).to.have.property(\"category\");\r",
									"    pm.expect(json.category).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"product2\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/new-product",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"new-product"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-sortables authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
									"const out = pm.response.json();\r",
									"pm.test(\"Returns array same length\", () => pm.expect(out.length).to.eql(2));\r",
									"pm.test(\"Orders updated\", () => {\r",
									"  pm.expect(out.find(x=>x.id===1).order).to.eql(2);\r",
									"  pm.expect(out.find(x=>x.id===2).order).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"type\": \"products\",\r\n        \"id\": 2\r\n    },\r\n    {\r\n        \"type\": \"products\",\r\n        \"id\": 1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shopping/update-sortables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shopping",
								"update-sortables"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "password",
				"type": "string"
			},
			{
				"key": "username",
				"value": "user",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "SPRING_PASSWORD",
			"value": "",
			"type": "string"
		},
		{
			"key": "SPRING_PASSWORD",
			"value": "",
			"type": "default"
		}
	]
}